@page "/put-order"

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@inject IOrderService OrderService

@if (Order != null)
{
	<EditForm Model="Order" OnSubmit="InsertOrder">

		<label>Product:</label>
		<select value="@Order?.Product.Id" class="form-control" @onchange="UpdateProduct">
			@foreach (Product p in Products)
			{
				<option value="@p.Id">@p.Name</option>
			}
		</select>

		@if (AuthenticationService.UserAuthenticated?.Role == "Store")
		{
			<label>Warehouse:</label>
			<select value="@Order?.Warehouse?.Id" class="form-control" @onchange="UpdateWarehouse">
				@foreach (Warehouse w in Warehouses)
				{
					<option value="@w.Id">@w.Name</option>
				}
			</select>
		}
		<br />
		<label>Quantity:</label>
		@if (Order != null)
		{
			<InputNumber @bind-Value="@Order.Quantity" />
		}
		<hr />
		<br />
		<button type="submit" class="btn btn-outline-primary small-btn">
			Put Order
		</button>
	</EditForm>
}

@code {
	public Order? Order { get; set; }
	public List<Product> Products { get; set; } = new List<Product>();
	public List<Warehouse> Warehouses { get; set; }  = new List<Warehouse>();

	protected override async Task OnInitializedAsync()
	{
		if (AuthenticationService.UserAuthenticated == null)
		{
			throw new Exception("AuthenticationService.UserAuthenticated is null");
		}

		Products = await ProductService.GetAllProducts();
		Warehouses = await WarehouseService.GetAllWarehouses();
		Order = new Order()
		{
				Product = Products[0],
				Warehouse = null,
				User = AuthenticationService.UserAuthenticated,
				Quantity = 1
		};
	}

	async void InsertOrder()
	{
		if(Order != null)
		{
			await OrderService.AddOrder(Order);
			NavigationManager.NavigateTo("/order", true);
		}
	}

	private async void UpdateProduct(ChangeEventArgs e)
	{
		if(Order != null && e.Value != null)
		{
			var p = await ProductService.GetProductById(Convert.ToInt32(e.Value));
			Order.Product = p;
		}
	}

	private async void UpdateWarehouse(ChangeEventArgs e)
	{
		if (Order != null && e.Value != null)
		{
			var w = await WarehouseService.GetWarehouseById(Convert.ToInt32(e.Value));
			Order.Warehouse = w;
		}
	}
}
